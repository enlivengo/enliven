// Code generated by go-bindata.
// sources:
// templates/login.html
// templates/logout.html
// templates/password.html
// templates/register.html
// templates/verify.html
// DO NOT EDIT!

package user

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xc9\x4f\xcf\xcc\x53\xe4\xb2\x49\x2a\x52\xd0\xb7\x83\x90\x5c\x36\x69\xf9\x45\xb9\x0a\xb9\xa9\x25\x19\xf9\x29\xb6\x4a\x01\xfe\xc1\x21\x4a\x76\x5c\xae\xb9\x89\x99\x39\x56\x5c\x30\x25\x99\x79\x05\xa5\x25\x0a\x79\x89\xb9\xa9\xb6\x4a\xa5\xc5\xa9\x45\x20\x96\x92\x42\x49\x65\x01\x90\x5f\x92\x5a\x51\xa2\x04\x56\x85\x6c\x2a\x57\x40\x62\x71\x71\x79\x7e\x51\x0a\x76\x43\x0a\xa0\xb2\x30\x43\x10\x7c\x0c\x83\xa0\xfa\x20\xea\x8a\x4b\x93\x72\x33\x81\xd6\x95\x25\xe6\x94\x02\xb9\xc1\x50\x2e\x48\x93\x3e\xc8\x1f\x76\x5c\x80\x00\x00\x00\xff\xff\xe3\x9d\xbe\x7c\xe3\x00\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 227, mode: os.FileMode(436), modTime: time.Unix(1463550676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLogoutHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xf2\xc9\x4f\xcf\x2f\x2d\x51\x04\x04\x00\x00\xff\xff\xe3\x37\x32\xfa\x07\x00\x00\x00")

func templatesLogoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLogoutHtml,
		"templates/logout.html",
	)
}

func templatesLogoutHtml() (*asset, error) {
	bytes, err := templatesLogoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/logout.html", size: 7, mode: os.FileMode(436), modTime: time.Unix(1463462414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPasswordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x48\x2c\x2e\x2e\xcf\x2f\x4a\x51\x04\x04\x00\x00\xff\xff\x6d\x99\x16\xea\x09\x00\x00\x00")

func templatesPasswordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPasswordHtml,
		"templates/password.html",
	)
}

func templatesPasswordHtml() (*asset, error) {
	bytes, err := templatesPasswordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/password.html", size: 9, mode: os.FileMode(436), modTime: time.Unix(1463461355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x4a\x4d\xcf\x2c\x2e\x49\x2d\x52\x04\x04\x00\x00\xff\xff\x4d\x50\x1f\x06\x09\x00\x00\x00")

func templatesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegisterHtml,
		"templates/register.html",
	)
}

func templatesRegisterHtml() (*asset, error) {
	bytes, err := templatesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/register.html", size: 9, mode: os.FileMode(436), modTime: time.Unix(1463461360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerifyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x4b\x2d\xca\x4c\xab\x54\x04\x04\x00\x00\xff\xff\x4f\xf3\xa2\xbe\x07\x00\x00\x00")

func templatesVerifyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerifyHtml,
		"templates/verify.html",
	)
}

func templatesVerifyHtml() (*asset, error) {
	bytes, err := templatesVerifyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify.html", size: 7, mode: os.FileMode(436), modTime: time.Unix(1463461366, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/login.html": templatesLoginHtml,
	"templates/logout.html": templatesLogoutHtml,
	"templates/password.html": templatesPasswordHtml,
	"templates/register.html": templatesRegisterHtml,
	"templates/verify.html": templatesVerifyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"logout.html": &bintree{templatesLogoutHtml, map[string]*bintree{}},
		"password.html": &bintree{templatesPasswordHtml, map[string]*bintree{}},
		"register.html": &bintree{templatesRegisterHtml, map[string]*bintree{}},
		"verify.html": &bintree{templatesVerifyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

