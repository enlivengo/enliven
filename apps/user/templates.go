// Code generated by go-bindata.
// sources:
// templates/login.html
// templates/password.html
// templates/register.html
// templates/verify.html
// DO NOT EDIT!

package user

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x51\x4d\x6b\x85\x30\x10\xbc\xfb\x2b\x96\x40\x8f\xad\x52\xe8\xc5\xaa\xb7\x9e\xfb\xe0\xf5\x0f\xe4\xbd\xac\x35\x90\x18\x31\xeb\xfb\x20\xf8\xdf\xbb\x31\xb6\x7a\x29\x94\xe6\x20\xce\x64\x32\x33\xcb\x86\xa0\xb0\xd5\x3d\x82\x30\xee\x53\xf7\x62\x9e\xb3\x10\x08\xed\x60\x24\x31\xd9\xa1\x54\x38\x46\x36\xab\x3c\xdd\x0d\x02\xdd\x07\xac\x05\xe1\x8d\xf2\xb3\xf7\xa2\xc9\x80\x8f\xd2\x97\xa7\xd6\x8d\xf6\xb1\xd5\x68\x14\x84\x85\x8c\xe7\xaa\x15\x75\x25\xbc\x14\x0f\xaf\x3f\x9c\x95\x23\x27\x95\x50\x80\x9c\xc8\xc1\x73\x31\xdc\xd2\xe5\x9c\x55\xf9\x12\xd2\x70\x5a\xb4\x03\x8b\xd4\x39\x55\x8b\xc3\xfb\xf1\x43\x44\x96\x83\xe0\x6c\xa4\xf7\xb5\xd8\xf2\xd6\x12\x95\x91\x27\x34\xc0\x7c\x2d\x26\x8f\x63\x2f\x2d\x8a\xe6\xcd\x4a\x6d\xca\x2a\x5f\x2e\x57\xa1\xee\x87\x89\x40\xab\x9d\x0e\xe2\x77\x8f\xb7\x39\x05\xe4\x0d\x37\xe3\xe8\xff\x35\x38\xb0\xf8\xea\x46\xf5\x6b\x89\x61\x15\x7c\x97\xd8\x70\x2a\xb1\xe1\x3f\x17\x49\xe6\xe9\xb9\x9f\x4e\x56\xf3\x14\x17\x69\x26\x86\xc7\x15\xee\xbd\xf2\xe8\xc0\x3f\xfb\xd5\xb7\xce\x51\x5a\x7d\x08\xd8\xab\x79\xfe\x0a\x00\x00\xff\xff\x9a\xfe\x85\x34\x2b\x02\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 555, mode: os.FileMode(436), modTime: time.Unix(1463730280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPasswordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\x4f\xaa\x83\x30\x10\xc7\xf1\x7d\x4e\x31\x2f\xf0\x96\xad\x52\xe8\xc6\x5a\x0f\xd1\x1b\x84\xce\x44\x03\x6a\x42\x32\xad\xca\x90\xbb\xd7\x3f\x50\xe8\x6f\xf9\x99\xc5\x7c\x45\x90\xac\x1b\x09\x74\x30\x29\x4d\x3e\xa2\xce\x59\x89\x30\x0d\xa1\x37\xbc\x7a\x47\x06\x29\x6e\xaa\xea\xc4\x4b\x4f\xc0\x4b\xa0\xbb\x66\x9a\xb9\x78\xa6\xa4\x1b\x05\xeb\xd0\xbd\xcf\xd6\xc7\xe1\x64\x1d\xf5\x08\xb2\xe3\xb6\xc9\x21\x77\x15\x5c\xcb\xff\xdb\xd7\x06\x13\x5b\x37\x56\x50\x82\x79\xb1\x87\x4b\x19\xe6\xe3\x98\x55\x5d\xec\x4f\x1a\xa5\x1e\xd4\xba\xc4\x14\xff\xd4\x4f\x8f\xf5\x9e\x8f\x1e\x11\x1a\x31\xe7\x4f\x00\x00\x00\xff\xff\x58\xcb\x7a\x18\xc3\x00\x00\x00")

func templatesPasswordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPasswordHtml,
		"templates/password.html",
	)
}

func templatesPasswordHtml() (*asset, error) {
	bytes, err := templatesPasswordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/password.html", size: 195, mode: os.FileMode(436), modTime: time.Unix(1463730338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\x41\xae\x82\x30\x10\xc6\xf1\xfd\x9c\x62\x5e\x93\xb7\x54\x88\x89\x1b\x44\x0e\xe1\x0d\x1a\x3b\x85\x49\x80\x36\xed\xa8\x90\xa6\x77\x17\xc1\x90\xf8\x2d\x7f\xb3\x98\x7f\x4a\x86\x2c\x8f\x84\x2a\x50\xcb\x51\x28\xa8\x9c\x21\x25\xa1\xc1\xf7\x5a\x16\xef\x48\x9b\x4d\xa1\x8e\x32\xf7\x84\x32\x7b\xba\x2a\xa1\x49\x8a\x7b\x8c\xaa\x01\x5c\x66\xf8\x79\xb4\x2e\x0c\x07\xcb\xd4\x1b\x4c\x2b\x7e\xf6\x62\x23\x5d\x85\xe7\xf2\xff\xb2\xdb\xa0\x43\xcb\x63\x85\x25\xea\x87\x38\x3c\x95\x7e\xda\x8e\x19\xea\x62\x7d\xd2\x00\xdc\xbe\x41\x7f\xf0\xd3\x63\x9d\xdb\x2b\x69\x34\x39\xbf\x03\x00\x00\xff\xff\x9f\x4c\x2e\x34\xc3\x00\x00\x00")

func templatesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegisterHtml,
		"templates/register.html",
	)
}

func templatesRegisterHtml() (*asset, error) {
	bytes, err := templatesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/register.html", size: 195, mode: os.FileMode(436), modTime: time.Unix(1463730770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerifyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xce\x4d\x8e\x83\x30\x0c\x86\xe1\xbd\x4f\xe1\x89\x34\xcb\x19\xd0\x48\xb3\xa1\x94\x43\xf4\x06\x51\xe3\x80\x25\x20\x28\x71\x29\xc8\xca\xdd\xcb\x8f\x54\xa9\xdf\xf2\xf1\xc2\xaf\xaa\x23\xcf\x23\xa1\x99\x29\xb2\x5f\x4d\xce\xa0\x2a\x34\x4c\xbd\x95\x4d\x3b\xb2\x8e\xe2\xae\x50\x27\x59\x7b\x42\x59\x27\xba\x1a\xa1\x45\x8a\x7b\x4a\xa6\x01\xdc\xe6\x78\xfe\xf5\x21\x0e\x3f\x9e\xa9\x77\xa8\x07\xee\x7b\xb2\x93\xae\xc2\xff\xf2\xfb\xf2\xb6\xc1\xc6\x96\xc7\x0a\x4b\xb4\x0f\x09\xf8\x57\x4e\xcb\x79\xcc\x50\x17\xc7\x93\x06\xe0\x46\x2d\x27\xa1\xf8\x05\x1f\x3d\x3e\x04\x39\x7b\x54\x69\x74\x39\xbf\x02\x00\x00\xff\xff\x65\x1d\xe6\x51\xc1\x00\x00\x00")

func templatesVerifyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerifyHtml,
		"templates/verify.html",
	)
}

func templatesVerifyHtml() (*asset, error) {
	bytes, err := templatesVerifyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify.html", size: 193, mode: os.FileMode(436), modTime: time.Unix(1463730328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/login.html": templatesLoginHtml,
	"templates/password.html": templatesPasswordHtml,
	"templates/register.html": templatesRegisterHtml,
	"templates/verify.html": templatesVerifyHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"password.html": &bintree{templatesPasswordHtml, map[string]*bintree{}},
		"register.html": &bintree{templatesRegisterHtml, map[string]*bintree{}},
		"verify.html": &bintree{templatesVerifyHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

