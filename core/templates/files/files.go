// Code generated by go-bindata.
// sources:
// files/footer.html
// files/forbidden.html
// files/header.html
// files/home.html
// files/notfound.html
// DO NOT EDIT!

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\xb1\x6a\xc4\x30\x0c\x86\x67\xfb\x29\xd4\x0c\xdd\x12\xed\x57\x9d\xe0\xe0\xd2\xa9\x85\x0e\xf7\x02\x69\xac\x5c\x0c\x3e\xdb\x38\x22\x10\x42\xde\xbd\xe0\xd0\x51\x1f\x9f\xf8\xfe\x7d\x77\x32\xf9\x28\xd0\x4c\x29\xa9\x94\xe6\x38\xac\x31\x86\x70\x91\x51\x7d\x8a\x6c\xeb\xf9\xd6\xb6\xf0\x59\x05\x68\x5b\xae\xe8\xf4\xc1\xbb\xeb\xff\x6b\xe5\x86\x32\xbf\x8f\x29\x6f\x1f\xd0\xc7\xe0\x57\x89\x1d\xdc\x42\x80\xe2\x9f\xb3\x2e\x50\x64\x91\xb2\x8a\xeb\xe0\x2e\x8b\x7f\xc6\x0b\xd0\x00\x73\x91\xe9\xda\xcc\xaa\xf9\x82\xa8\xf2\xca\x61\x50\x71\xdd\x98\x1a\x7e\xf4\xdf\x3f\x5f\xb7\x47\x7f\x27\x1c\xb8\x23\xcc\x67\x1c\xcf\x64\x5d\x47\xe8\xfc\xca\xd6\x10\xfe\x26\xb7\xb1\x25\x9c\xf5\x15\xd8\xee\xbb\x44\x77\x1c\x7f\x01\x00\x00\xff\xff\x4a\x19\xb6\xe0\xe2\x00\x00\x00")

func filesFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesFooterHtml,
		"files/footer.html",
	)
}

func filesFooterHtml() (*asset, error) {
	bytes, err := filesFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/footer.html", size: 226, mode: os.FileMode(438), modTime: time.Unix(1473740472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesForbiddenHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\xc1\xaa\xc2\x30\x10\x46\xe1\x7d\x9f\x22\x64\x7f\x6f\x05\x5d\xd5\xb4\x4b\xdf\x23\x76\xfe\xd6\x40\x9c\x48\x32\x14\x65\x98\x77\x77\x63\x41\x77\x67\x73\xf8\x54\x09\x4b\x62\x38\xbf\x94\x7a\x4d\x44\x60\x6f\xd6\xa9\x0a\xee\x8f\x1c\x05\xce\xdf\x10\x09\xd5\xbb\x7f\xb3\x2e\x50\xda\xdc\x9c\x63\x6b\xe3\xd7\xe0\x9a\xbc\x32\x46\x2f\x78\xca\x5f\xcc\x69\xe5\x61\x06\x0b\xea\xd9\x4f\xa1\x49\x2d\xbc\x4e\xa7\xc3\x31\xf4\x9f\x1e\xdc\x65\x7f\x43\x4f\x69\x9b\x7e\xbc\xa5\x14\xd9\x3d\x55\x30\x99\xbd\x03\x00\x00\xff\xff\x61\xfd\xa9\x73\xa6\x00\x00\x00")

func filesForbiddenHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesForbiddenHtml,
		"files/forbidden.html",
	)
}

func filesForbiddenHtml() (*asset, error) {
	bytes, err := filesForbiddenHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/forbidden.html", size: 166, mode: os.FileMode(438), modTime: time.Unix(1473318898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x5d\x6f\xd3\x30\x14\x7d\x4e\x7e\xc5\x9d\x9f\x40\x22\x31\x15\x2f\x68\x38\x11\xa5\xab\xe8\xa4\x4d\xab\xb6\x02\xe2\xd1\x4b\x6e\x93\x2b\x39\x76\x64\xdf\x74\x94\xaa\xff\x1d\xe5\x83\xd2\x4d\x08\x9e\x62\x5f\x9f\x7b\xce\xfd\x38\x39\x1c\x4a\xdc\x92\x45\x10\x35\xea\x12\xbd\x38\x1e\xd5\xc5\xd5\xdd\x62\xf3\x7d\xbd\x84\xd5\xe6\xf6\x26\x8f\xd5\x45\x92\xc4\xd1\x57\x0a\x9d\x36\xf4\x13\xe1\x71\x0f\x9b\xe5\xed\xfa\x66\xbe\x59\x5e\xc5\x11\x63\xd3\x1a\xcd\x58\xa6\x85\x83\x8f\xa7\x5b\xe1\xe2\xe8\x1e\x0d\xea\x80\x25\x6c\x9d\x87\xad\x47\x84\xce\x96\xe8\x81\x6b\x84\x85\x47\xcd\xb4\x43\x58\xb8\xa6\x71\x36\xc0\x9c\xd9\xd3\x63\xc7\xe4\x2c\xbc\x4b\xdf\x82\xa1\x02\x6d\x40\x78\x75\x2e\x20\xa7\xe8\xeb\x38\x49\xf2\x58\xd5\xdc\x98\x3c\x8e\x54\x5f\x7a\x1e\x47\x91\x62\x62\x83\xf9\xd2\x1a\xda\xa1\xbd\x84\xcf\x2e\x85\x07\x6a\x5a\xb3\x4f\x95\x1c\xdf\x7a\x54\x83\xac\xa1\xa8\xb5\x0f\xc8\x99\xe8\x78\x9b\xbc\x17\x20\xff\x3c\x59\xdd\x60\x26\x76\x84\x4f\xad\xf3\x2c\xa0\x70\x96\xd1\x72\x26\x9e\xa8\xe4\x3a\x2b\x71\x47\x05\x26\xc3\xe5\x0d\x90\x25\x26\x6d\x92\x50\x68\x83\xd9\x6c\x20\xea\x99\x02\xef\x0d\x02\xef\x5b\xcc\x04\xe3\x0f\x96\x45\x08\xa2\xd7\x88\xea\x19\x1c\xfa\x6f\xd4\x87\x13\x6d\xa8\xb2\x97\x50\xa0\x65\xf4\x1f\xfa\xf8\xb1\x4f\x97\x43\x7e\xdf\x9c\x9c\xba\x53\x8f\xae\xdc\x8f\xdc\x17\x49\x02\xdf\xbc\x6e\x5b\xf4\xd0\x0f\x22\x8a\x54\x49\x3b\xa0\x32\x13\x4f\x63\x58\x0c\xc0\x11\xb9\x1a\x16\x3b\x01\xc7\x61\xa1\x1f\xc0\xd3\xca\x87\x78\xa4\xea\x59\xae\x02\x7b\x67\xab\xdf\x13\xec\xab\x18\xee\x2f\x46\x59\xcf\xa6\x94\xce\x40\x61\x74\x08\x99\xa0\xc2\xd9\xa9\xbf\x28\x52\x86\x72\xa5\xa1\xf6\xb8\xcd\x84\x14\xf9\xca\x35\xa8\xa4\xce\x95\x34\x34\x41\x0e\x07\xda\x42\xfa\xc9\x39\x83\xda\x86\xf4\x4b\x40\x7f\xe3\xaa\x0a\xcb\x6b\x7b\x3c\x8e\x90\x17\x34\x5d\x40\x2f\x5b\xef\xb6\x64\x50\x8a\x7c\x3d\x9e\xce\x28\x27\xce\xa9\xf6\x74\xde\x71\x9d\xae\x74\x58\xa3\x6f\x28\x84\xde\x57\x42\x97\x0d\xd9\x44\xb7\xad\x80\xf4\x24\xf3\x42\x67\xc0\x48\x91\xcf\xfb\x2f\xac\xb5\x45\xf3\x5c\x04\x6d\xf9\xaf\x12\x8d\xab\x5c\xc7\x52\xe4\x0f\x54\x59\xb8\xeb\xf8\x59\xd7\x68\x02\xfe\x27\x7b\x50\x1f\x92\xaf\xed\xb9\xf2\x5f\xd0\x1e\x2b\x0a\x8c\x5e\x8a\xfc\x7e\x3a\x3e\x57\x3b\x95\xaa\x64\x67\xc6\xfd\xcb\x71\xeb\x67\x06\x59\x8c\xfe\x3e\x39\x24\x60\x31\xfc\x86\xbd\x45\x26\xef\x8b\x3c\x9e\xd8\x7e\x05\x00\x00\xff\xff\x7d\x42\x0c\x94\x31\x04\x00\x00")

func filesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesHeaderHtml,
		"files/header.html",
	)
}

func filesHeaderHtml() (*asset, error) {
	bytes, err := filesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/header.html", size: 1073, mode: os.FileMode(438), modTime: time.Unix(1473751039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcf\x41\x4b\x03\x31\x10\x05\xe0\xfb\xfe\x8a\x21\x77\xd3\x7b\xdd\xee\x41\x04\x15\xc4\x8b\x88\xe7\xb0\x79\x1b\x03\x49\xa6\x24\x43\xb1\x0c\xf9\xef\xd2\xed\x16\xec\x71\xe6\x7d\x03\xf3\x54\x3d\x96\x58\x40\xe6\x87\x33\x4c\xef\x83\xaa\x20\x1f\x93\x93\xcb\x0e\xce\xa3\x1a\xb2\xbd\x0f\xa3\x8f\x27\x9a\x93\x6b\xed\x70\xb5\xd4\xe4\x9c\x70\x30\x82\x5f\x79\x70\x29\x86\xb2\x9f\x51\x04\xf5\xd1\x4c\x03\x11\xd1\xd8\xa4\x72\x09\xd3\x37\xd2\xcc\x19\xe3\x6e\x9b\xf7\x6b\xaa\x1a\x17\xb2\x4f\xcc\x09\xae\x34\xfb\xd5\x50\xdf\x39\x04\xf8\xb7\xd2\xfb\x2a\xae\xca\x7e\x0a\x57\x17\xb0\x0a\xfb\x02\x79\x8e\xed\x98\xdc\xf9\xc3\x65\x6c\x50\x15\xa9\xe1\xdf\xd5\x2b\x67\xdc\x92\xe2\x2f\xcf\xef\x7c\x3c\x4d\x77\xdd\x16\x66\xb9\x75\xdb\xd8\x5f\x00\x00\x00\xff\xff\x1d\x81\x1f\x6d\x0d\x01\x00\x00")

func filesHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesHomeHtml,
		"files/home.html",
	)
}

func filesHomeHtml() (*asset, error) {
	bytes, err := filesHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/home.html", size: 269, mode: os.FileMode(438), modTime: time.Unix(1473318898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesNotfoundHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcd\xb1\x0a\xc2\x40\x0c\xc6\xf1\xbd\x4f\x11\x6e\xd7\x3a\x74\xaa\xd7\x8e\x8e\xbe\xc3\xd1\xa4\xf5\xe0\x4c\xa4\x17\x8b\x12\xf2\xee\x22\x28\xe2\xf6\x0d\xdf\x9f\x9f\x19\xd2\x9c\x99\x20\xb0\xe8\x2c\x77\xc6\xe0\xde\x98\x29\x5d\x6f\x25\x29\x41\xb8\x50\x42\x5a\x03\xec\xdd\x9b\x88\x79\x83\xa9\xa4\x5a\x87\xdf\x1f\xaa\x3e\x0b\x0d\x41\xe9\xa1\xbb\x54\xf2\xc2\xfd\x44\xac\xb4\x1e\xc3\x18\xab\xae\xc2\xcb\xd8\x1d\xba\xd8\x7e\x76\x0f\x67\x51\x38\xbd\xdb\xd8\x62\xde\xc6\x3f\x6e\x16\xd1\x2f\x67\x46\x8c\xee\xaf\x00\x00\x00\xff\xff\xa9\x6c\x41\x57\xa4\x00\x00\x00")

func filesNotfoundHtmlBytes() ([]byte, error) {
	return bindataRead(
		_filesNotfoundHtml,
		"files/notfound.html",
	)
}

func filesNotfoundHtml() (*asset, error) {
	bytes, err := filesNotfoundHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/notfound.html", size: 164, mode: os.FileMode(438), modTime: time.Unix(1473318898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/footer.html": filesFooterHtml,
	"files/forbidden.html": filesForbiddenHtml,
	"files/header.html": filesHeaderHtml,
	"files/home.html": filesHomeHtml,
	"files/notfound.html": filesNotfoundHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{filesFooterHtml, map[string]*bintree{}},
		"forbidden.html": &bintree{filesForbiddenHtml, map[string]*bintree{}},
		"header.html": &bintree{filesHeaderHtml, map[string]*bintree{}},
		"home.html": &bintree{filesHomeHtml, map[string]*bintree{}},
		"notfound.html": &bintree{filesNotfoundHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

